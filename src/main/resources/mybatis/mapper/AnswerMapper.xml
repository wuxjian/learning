<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="the.school.learning.mapper.AnswerMapper">
  <resultMap id="BaseResultMap" type="the.school.learning.entity.Answer">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="exam_id" jdbcType="INTEGER" property="examId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="your_answer" jdbcType="VARCHAR" property="yourAnswer" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="create_time" jdbcType="VARCHAR" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, exam_id, user_id, your_answer, score, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from answer
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from answer
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="the.school.learning.entity.Answer">
    insert into answer (id, exam_id, user_id, 
      your_answer, score, create_time
      )
    values (#{id,jdbcType=INTEGER}, #{examId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{yourAnswer,jdbcType=VARCHAR}, #{score,jdbcType=INTEGER}, #{createTime,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="the.school.learning.entity.Answer">
    insert into answer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="examId != null">
        exam_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="yourAnswer != null">
        your_answer,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="examId != null">
        #{examId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="yourAnswer != null">
        #{yourAnswer,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="the.school.learning.entity.Answer">
    update answer
    <set>
      <if test="examId != null">
        exam_id = #{examId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="yourAnswer != null">
        your_answer = #{yourAnswer,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="the.school.learning.entity.Answer">
    update answer
    set exam_id = #{examId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      your_answer = #{yourAnswer,jdbcType=VARCHAR},
      score = #{score,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectCount" resultType="int">
    select
    count(1)
    from answer t1
    inner join examination t2 on t1.exam_id = t2.id
    where t1.user_id = #{userId} and t2.status = '1'
  </select>

  <select id="selectExamRecordPage" resultType="the.school.learning.common.vo.ExaminationRecordVo">
    select
    t2.exam_name examName,
    t2.exam_score examScore,
    t1.score,
    t1.create_time createTime
    from answer t1
    inner join examination t2 on t1.exam_id = t2.id
    where t1.user_id = #{userId} and t2.status = '1'
    order by t1.create_time desc
    limit #{limit} offset #{offset}
  </select>
</mapper>
