<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="the.school.learning.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="the.school.learning.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="age" jdbcType="TINYINT" property="age" />
    <result column="log_time" jdbcType="VARCHAR" property="logTime" />
    <result column="enabled" jdbcType="CHAR" property="enabled" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, nickname, `password`, sex, age, log_time, enabled
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="the.school.learning.entity.User">
    insert into user (id, username, nickname, 
      `password`, sex, age, log_time, 
      enabled)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR}, #{age,jdbcType=TINYINT}, #{logTime,jdbcType=VARCHAR}, 
      #{enabled,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="the.school.learning.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="logTime != null">
        log_time,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=TINYINT},
      </if>
      <if test="logTime != null">
        #{logTime,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="the.school.learning.entity.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=TINYINT},
      </if>
      <if test="logTime != null">
        log_time = #{logTime,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="the.school.learning.entity.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=TINYINT},
      log_time = #{logTime,jdbcType=VARCHAR},
      enabled = #{enabled,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByUsername" resultMap="BaseResultMap">
    select
    *
    from user
    where username = #{username}
  </select>

  <resultMap id="UserRoleResultMap" type="the.school.learning.common.vo.UserVo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="age" jdbcType="TINYINT" property="age" />
    <result column="log_time" jdbcType="VARCHAR" property="logTime" />
    <result column="enabled" jdbcType="CHAR" property="enabled" />
    <result column="role" jdbcType="VARCHAR" property="role" />
  </resultMap>

  <select id="selectByPage" resultMap="UserRoleResultMap">
    select
    t1.*,
    t3.role
    from user t1
    inner join user_role t2 on t1.id = t2.user_id
	inner join role t3 on t2.role_id = t3.id
    limit #{limit} offset #{offset}
  </select>

  <select id="selectCount" resultType="int">
    select count(1)
    from user
  </select>

  <select id="profileStatistic" resultType="int">
    select sum(learn_count) val
    from article_learn t1
    inner join article t2 on t1.article_id = t2.id
    where t1.user_id = #{userId}

    union all

    select sum(learn_times) val
    from article_learn t1
    inner join article t2 on t1.article_id = t2.id
    where user_id = #{userId}

    union all

    select count(1) val from comment where user_id = #{userId}

    union all

    select count(1) val from comment_reply where user_id = #{userId}
  </select>
</mapper>
